local component = require("component")
local term = require("term")
local os = require("os")

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ME Controller
function checkMEController()
    print("=== ME Controller Connection Checker ===")
    print()
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ME Controller
    if not component.isAvailable("me_controller") then
        print("‚ùå ME Controller –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("- ME Controller –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –∫–æ–º–ø—å—é—Ç–µ—Ä—É —á–µ—Ä–µ–∑ –∫–∞–±–µ–ª—å")
        print("- –ê–¥–∞–ø—Ç–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("- ME —Å–µ—Ç—å –∑–∞–ø–∏—Ç–∞–Ω–∞")
        return false
    end
    
    print("‚úÖ ME Controller –Ω–∞–π–¥–µ–Ω!")
    
    -- –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ME Controller
    local me = component.me_controller
    print("–ê–¥—Ä–µ—Å: " .. me.address)
    print()
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–µ—Ç–æ–¥—ã —ç–Ω–µ—Ä–≥–∏–∏
    print("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–Ω–µ—Ä–≥–∏–∏ ===")
    
    local success, energy = pcall(me.getEnergyStored)
    if success then
        print("–¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: " .. energy .. " AE")
    else
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —ç–Ω–µ—Ä–≥–∏–∏: " .. energy)
    end
    
    local success, maxEnergy = pcall(me.getMaxEnergyStored)
    if success then
        print("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: " .. maxEnergy .. " AE")
        if energy and maxEnergy > 0 then
            local percentage = math.floor((energy / maxEnergy) * 100)
            print("–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ: " .. percentage .. "%")
        end
    else
        print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏: " .. maxEnergy)
    end
    
    local success, canExtract = pcall(me.canExtract)
    if success then
        print("–ú–æ–∂–Ω–æ –∏–∑–≤–ª–µ–∫–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é: " .. (canExtract and "–î–∞" or "–ù–µ—Ç"))
    else
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏: " .. canExtract)
    end
    
    local success, canReceive = pcall(me.canReceive)
    if success then
        print("–ú–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —ç–Ω–µ—Ä–≥–∏—é: " .. (canReceive and "–î–∞" or "–ù–µ—Ç"))
    else
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—É—á–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏: " .. canReceive)
    end
    
    print()
    print("=== –¢–µ—Å—Ç Common Network API ===")
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–µ—Ç–∏
    if me.getItemsInNetwork then
        local success, items = pcall(me.getItemsInNetwork)
        if success then
            print("‚úÖ –ü—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–µ—Ç–∏: " .. #items .. " —Ç–∏–ø–æ–≤")
            if #items > 0 then
                print("   –ü—Ä–∏–º–µ—Ä—ã –ø—Ä–µ–¥–º–µ—Ç–æ–≤:")
                for i = 1, math.min(3, #items) do
                    local item = items[i]
                    print("   - " .. (item.label or item.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π") .. " x" .. (item.size or 0))
                end
            end
        else
            print("‚ùå –û—à–∏–±–∫–∞ getItemsInNetwork(): " .. items)
        end
    else
        print("‚ö†Ô∏è getItemsInNetwork() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    end
    

    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º CPU
    if me.getCpus then
        local success, cpus = pcall(me.getCpus)
        if success then
            print("‚úÖ CPU –≤ —Å–µ—Ç–∏: " .. #cpus)
            local busyCpus = 0
            for _, cpu in ipairs(cpus) do
                if cpu.busy then
                    busyCpus = busyCpus + 1
                end
            end
            if busyCpus > 0 then
                print("   –ó–∞–Ω—è—Ç–æ CPU: " .. busyCpus)
            end
        else
            print("‚ùå –û—à–∏–±–∫–∞ getCpus(): " .. cpus)
        end
    else
        print("‚ö†Ô∏è getCpus() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    end
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∞—Ñ—Ç–∞–±–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã
    if me.getCraftables then
        local success, craftables = pcall(me.getCraftables)
        if success then
            print("‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤: " .. #craftables)
        else
            print("‚ùå –û—à–∏–±–∫–∞ getCraftables(): " .. craftables)
        end
    else
        print("‚ö†Ô∏è getCraftables() –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    end
    
    print()
    print("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏ —Å–µ—Ç–∏ ===")
    
    -- –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∏—Ç–∞–Ω–∏–µ —Å–µ—Ç–∏
    if me.getStoredPower then
        local success, storedPower = pcall(me.getStoredPower)
        if success then
            print("–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: " .. string.format("%.1f", storedPower) .. " AE")
        else
            print("‚ùå –û—à–∏–±–∫–∞ getStoredPower(): " .. storedPower)
        end
    end
    
    if me.getMaxStoredPower then
        local success, maxStoredPower = pcall(me.getMaxStoredPower)
        if success then
            print("–ú–∞–∫—Å–∏–º—É–º –Ω–∞–∫–æ–ø–ª–µ–Ω–∏—è: " .. string.format("%.1f", maxStoredPower) .. " AE")
        else
            print("‚ùå –û—à–∏–±–∫–∞ getMaxStoredPower(): " .. maxStoredPower)
        end
    end
    
    if me.getAvgPowerUsage then
        local success, avgUsage = pcall(me.getAvgPowerUsage)
        if success then
            print("–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " .. string.format("%.2f", avgUsage) .. " AE/t")
        else
            print("‚ùå –û—à–∏–±–∫–∞ getAvgPowerUsage(): " .. avgUsage)
        end
    end
    
    if me.getAvgPowerInjection then
        local success, avgInjection = pcall(me.getAvgPowerInjection)
        if success then
            print("–°—Ä–µ–¥–Ω–µ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: " .. string.format("%.2f", avgInjection) .. " AE/t")
        else
            print("‚ùå –û—à–∏–±–∫–∞ getAvgPowerInjection(): " .. avgInjection)
        end
    end
    
    if me.getIdlePowerUsage then
        local success, idleUsage = pcall(me.getIdlePowerUsage)
        if success then
            print("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ: " .. string.format("%.2f", idleUsage) .. " AE/t")
        else
            print("‚ùå –û—à–∏–±–∫–∞ getIdlePowerUsage(): " .. idleUsage)
        end
    end
    
    return true
end

-- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ç–∏
function analyzeNetwork()
    if not component.isAvailable("me_controller") then
        print("ME Controller –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞!")
        return
    end
    
    local me = component.me_controller
    term.clear()
    print("=== –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ ME —Å–µ—Ç–∏ ===")
    print("–ê–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: " .. me.address)
    print()
    
    -- –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    local success, items = pcall(me.getItemsInNetwork)
    if success then
        print("üì¶ –ü–†–ï–î–ú–ï–¢–´ –í –°–ï–¢–ò:")
        print("–í—Å–µ–≥–æ —Ç–∏–ø–æ–≤ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. #items)
        
        if #items > 0 then
            -- –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É
            table.sort(items, function(a, b) return (a.size or 0) > (b.size or 0) end)
            
            print("–¢–æ–ø-5 –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É:")
            for i = 1, math.min(5, #items) do
                local item = items[i]
                local name = item.label or item.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π"
                local size = item.size or 0
                print(string.format("  %d. %s - %s —à—Ç.", i, name, size))
            end
            
            -- –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            local totalItems = 0
            for _, item in ipairs(items) do
                totalItems = totalItems + (item.size or 0)
            end
            print("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: " .. totalItems)
        end
        print()
    end
    

    
    -- –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–æ–≤
    local success, cpus = pcall(me.getCpus)
    if success then
        print("‚ö° –ü–†–û–¶–ï–°–°–û–†–´:")
        print("–í—Å–µ–≥–æ CPU: " .. #cpus)
        
        local busyCpus = 0
        local craftingJobs = {}
        
        for i, cpu in ipairs(cpus) do
            if cpu.busy then
                busyCpus = busyCpus + 1
                if cpu.activeItems and #cpu.activeItems > 0 then
                    for _, item in ipairs(cpu.activeItems) do
                        table.insert(craftingJobs, item.label or item.name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π")
                    end
                end
            end
        end
        
        print("–ó–∞–Ω—è—Ç–æ CPU: " .. busyCpus)
        
        if #craftingJobs > 0 then
            print("–¢–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏ –∫—Ä–∞—Ñ—Ç–∞:")
            for i, job in ipairs(craftingJobs) do
                print("  - " .. job)
            end
        end
        print()
    end
    
    -- –ê–Ω–∞–ª–∏–∑ –ø–∏—Ç–∞–Ω–∏—è
    print("üîã –ê–ù–ê–õ–ò–ó –ü–ò–¢–ê–ù–ò–Ø:")
    
    local power = {}
    local success, val
    
    success, val = pcall(me.getStoredPower)
    if success then power.stored = val end
    
    success, val = pcall(me.getMaxStoredPower)
    if success then power.maxStored = val end
    
    success, val = pcall(me.getAvgPowerUsage)
    if success then power.usage = val end
    
    success, val = pcall(me.getAvgPowerInjection)
    if success then power.injection = val end
    
    success, val = pcall(me.getIdlePowerUsage)
    if success then power.idle = val end
    
    if power.stored and power.maxStored then
        local percentage = power.maxStored > 0 and (power.stored / power.maxStored * 100) or 0
        print(string.format("–ù–∞–∫–æ–ø–ª–µ–Ω–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: %.1f / %.1f AE (%.1f%%)", power.stored, power.maxStored, percentage))
    end
    
    if power.usage and power.injection then
        local balance = power.injection - power.usage
        print(string.format("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: %.2f AE/t", power.usage))
        print(string.format("–ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: %.2f AE/t", power.injection))
        print(string.format("–ë–∞–ª–∞–Ω—Å: %s%.2f AE/t", balance >= 0 and "+" or "", balance))
        
        if power.stored and balance ~= 0 then
            local timeLeft = balance < 0 and (power.stored / (-balance)) or -1
            if timeLeft > 0 then
                print(string.format("‚ö†Ô∏è –≠–Ω–µ—Ä–≥–∏—è –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —á–µ—Ä–µ–∑: %.1f —Ç–∏–∫–æ–≤ (%.1f —Å–µ–∫)", timeLeft, timeLeft / 20))
            end
        end
    end
    
    if power.idle then
        print(string.format("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –≤ –ø–æ–∫–æ–µ: %.2f AE/t", power.idle))
    end
    
    print()
    print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é...")
    io.read()
end
function monitorME()
    if not component.isAvailable("me_controller") then
        print("ME Controller –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞!")
        return
    end
    
    local me = component.me_controller
    print("=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ME Controller ===")
    print("–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print()
    
    while true do
        term.clear()
        print("=== –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ ME Controller ===")
        print("–í—Ä–µ–º—è: " .. os.date())
        print("–ê–¥—Ä–µ—Å: " .. me.address)
        print()
        
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —ç–Ω–µ—Ä–≥–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
        local success, energy = pcall(me.getEnergyStored)
        local success2, maxEnergy = pcall(me.getMaxEnergyStored)
        
        if success and success2 then
            local percentage = maxEnergy > 0 and math.floor((energy / maxEnergy) * 100) or 0
            print("–≠–Ω–µ—Ä–≥–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞: " .. energy .. " / " .. maxEnergy .. " AE (" .. percentage .. "%)")
            
            -- –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —ç–Ω–µ—Ä–≥–∏–∏
            local barLength = 40
            local filled = math.floor((energy / maxEnergy) * barLength)
            local bar = "[" .. string.rep("=", filled) .. string.rep("-", barLength - filled) .. "]"
            print(bar)
        else
            print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —ç–Ω–µ—Ä–≥–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞")
        end
        
        print()
        
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ç–∞–Ω–∏–∏ —Å–µ—Ç–∏
        local success3, netPower = pcall(me.getStoredPower)
        local success4, netMaxPower = pcall(me.getMaxStoredPower)
        local success5, avgUsage = pcall(me.getAvgPowerUsage)
        local success6, avgInjection = pcall(me.getAvgPowerInjection)
        
        if success3 and success4 then
            local netPercentage = netMaxPower > 0 and math.floor((netPower / netMaxPower) * 100) or 0
            print("–ü–∏—Ç–∞–Ω–∏–µ —Å–µ—Ç–∏: " .. string.format("%.1f", netPower) .. " / " .. string.format("%.1f", netMaxPower) .. " AE (" .. netPercentage .. "%)")
        end
        
        if success5 and success6 then
            local balance = avgInjection - avgUsage
            local balanceStr = balance >= 0 and ("+" .. string.format("%.2f", balance)) or string.format("%.2f", balance)
            print("–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ: " .. string.format("%.2f", avgUsage) .. " AE/t | –ü–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ: " .. string.format("%.2f", avgInjection) .. " AE/t | –ë–∞–ª–∞–Ω—Å: " .. balanceStr .. " AE/t")
        end
        
        -- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö –∏ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞—Ö
        local success7, items = pcall(me.getItemsInNetwork)
        local success8, cpus = pcall(me.getCpus)
        
        if success7 then
            print("–ü—Ä–µ–¥–º–µ—Ç—ã –≤ —Å–µ—Ç–∏: " .. #items .. " —Ç–∏–ø–æ–≤")
        end
        
        if success8 then
            local busyCpus = 0
            for _, cpu in ipairs(cpus) do
                if cpu.busy then
                    busyCpus = busyCpus + 1
                end
            end
            print("CPU: " .. #cpus .. " –≤—Å–µ–≥–æ, " .. busyCpus .. " –∑–∞–Ω—è—Ç–æ")
        end
        
        print()
        print("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã...")
        os.sleep(2)
    end
end

-- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
function main()
    while true do
        term.clear()
        print("=== ME Controller Utility ===")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        print("2. –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ç–∏")
        print("3. –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏")
        print("4. üìú –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø—Ä–µ–¥–º–µ—Ç–æ–≤")
        print("5. –í—ã—Ö–æ–¥")
        print()
        print("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-5): ")
        
        local input = io.read()
        
        if input == "1" then
            term.clear()
            checkMEController()
            print()
            print("–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...")
            io.read()
        elseif input == "2" then
            analyzeNetwork()
        elseif input == "3" then
            term.clear()
            monitorME()
        elseif input == "4" then
            term.clear()
            monitorItemChanges()
        elseif input == "5" then
            print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        else
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")
            os.sleep(1)
        end
    end
end

-- –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
main()
